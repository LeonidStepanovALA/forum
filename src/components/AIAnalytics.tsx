'use client';

import React from 'react';

interface AIAnalyticsProps {
  searchQuery?: string;
  searchResults?: unknown[];
  onInsightClick?: (insight: string) => void;
}

export default function AIAnalytics({ searchQuery, onInsightClick }: AIAnalyticsProps) {
  const [isAnalyzing, setIsAnalyzing] = React.useState(false);

  // –ò–º–∏—Ç–∞—Ü–∏—è AI-–∞–Ω–∞–ª–∏–∑–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
  React.useEffect(() => {
    if (searchQuery && searchQuery.length > 3) {
      setIsAnalyzing(true);
      
      // –ò–º–∏—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏–∑
      setTimeout(() => {
        setIsAnalyzing(false);
      }, 2000);
    }
  }, [searchQuery]);

  const getSearchInsights = () => {
    const insights = [];
    
    if (searchQuery) {
      if (searchQuery.toLowerCase().includes('–≥–æ—Ä—ã')) {
        insights.push({
          type: 'trend',
          text: 'üî• –ü–æ–∏—Å–∫–∏ –≥–æ—Ä–Ω—ã—Ö —Ç—É—Ä–æ–≤ –≤—ã—Ä–æ—Å–ª–∏ –Ω–∞ 23% –≤ —ç—Ç–æ–º –º–µ—Å—è—Ü–µ',
          icon: 'üî•'
        });
      }
      
      if (searchQuery.toLowerCase().includes('—ç–∫–æ')) {
        insights.push({
          type: 'recommendation',
          text: 'üå± –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ç–∞–∫–∂–µ: "–≠–∫–æ-–æ—Ç–µ–ª–∏ —Å —Å–æ–ª–Ω–µ—á–Ω—ã–º–∏ –ø–∞–Ω–µ–ª—è–º–∏"',
          icon: 'üå±'
        });
      }
      
      if (searchQuery.toLowerCase().includes('–ø–∏—Ç–∞–Ω–∏–µ')) {
        insights.push({
          type: 'trend',
          text: 'üìà –û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–æ–µ –ø–∏—Ç–∞–Ω–∏–µ - —Ç—Ä–µ–Ω–¥ —Å–µ–∑–æ–Ω–∞',
          icon: 'üìà'
        });
      }
    }
    
    return insights;
  };

  const insights = getSearchInsights();

  return (
    <div className="space-y-6">
      {/* AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞ */}
      <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 border-2 border-blue-100">
        <div className="flex items-center gap-3 mb-4">
          <span className="text-2xl">üìä</span>
          <h3 className="text-lg font-semibold text-gray-800">AI-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞</h3>
          {isAnalyzing && (
            <div className="flex items-center gap-2">
              <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
              <span className="text-sm text-blue-600">–ê–Ω–∞–ª–∏–∑...</span>
            </div>
          )}
        </div>

        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
        <div className="grid grid-cols-2 gap-4 mb-6">
          <div className="bg-white p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">1247</div>
            <div className="text-xs text-gray-600">–í—Å–µ–≥–æ –ø–æ–∏—Å–∫–æ–≤</div>
          </div>
          <div className="bg-white p-3 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">94%</div>
            <div className="text-xs text-gray-600">–¢–æ—á–Ω–æ—Å—Ç—å AI</div>
          </div>
        </div>

        {/* AI-–∏–Ω—Å–∞–π—Ç—ã */}
        {insights.length > 0 && (
          <div className="mb-6">
            <div className="flex items-center gap-2 mb-3">
              <span className="text-xl">üí°</span>
              <span className="font-medium text-gray-700">AI-–∏–Ω—Å–∞–π—Ç—ã</span>
            </div>
            <div className="space-y-2">
              {insights.map((insight, index) => (
                <div
                  key={index}
                  className="bg-white p-3 rounded-lg border-l-4 border-blue-200 hover:border-blue-400 transition-colors cursor-pointer"
                  onClick={() => onInsightClick?.(insight.text)}
                >
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{insight.icon}</span>
                    <span className="text-sm text-gray-700">{insight.text}</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {/* –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã */}
        <div>
          <div className="flex items-center gap-2 mb-3">
            <span className="text-xl">üìà</span>
            <span className="font-medium text-gray-700">–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã</span>
          </div>
          <div className="flex flex-wrap gap-2">
            {['–≠–∫–æ-—Ç—É—Ä—ã –≤ –≥–æ—Ä—ã', '–û—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏–µ —Ñ–µ—Ä–º—ã', '–≠–ª–µ–∫—Ç—Ä–æ–≤–µ–ª–æ—Å–∏–ø–µ–¥—ã', '–ì–∏–¥-–Ω–∞—Ç—É—Ä–∞–ª–∏—Å—Ç'].map((query, index) => (
              <span
                key={index}
                className="bg-white px-3 py-1 rounded-full text-xs text-gray-600 border border-gray-200 hover:border-green-300 cursor-pointer"
              >
                {query}
              </span>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}
